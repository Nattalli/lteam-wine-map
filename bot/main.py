import os
import random
import psycopg2
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    Filters,
    MessageHandler,
    CallbackContext,
)

from dotenv import load_dotenv

load_dotenv()

QUESTION, ANSWERING = range(2)
SITE = os.getenv("SITE_LINK")


def start(update: Update, context: CallbackContext) -> None:
    update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç!\U0001F44B \n–¢–µ–±–µ –≤—ñ—Ç–∞—î Lwine bot. "
        "–¶–µ –±–æ—Ç-–≥—Ä–∞, —è–∫—â–æ –Ω–∞–ø–∏—Å–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É /game "
        "–º–æ–∂–Ω–∞ –∑—ñ–≥—Ä–∞—Ç–∏ —É –≥—Ä—É '–≤–≥–∞–¥–∞–π –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤–∏–Ω–∞ –ø–æ –Ω–∞–∑–≤—ñ'. "
        "–í–∏ –∑–∞–≤–∂–¥–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /help"
    )


def site(update: Update, context: CallbackContext) -> None:
    update.message.reply_text(
        f"–í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–±–∞—á–∏—Ç–∏ –Ω–∞—à —Å–∞–π—Ç –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: {SITE}"
    )


def help(update: Update, context: CallbackContext) -> None:
    update.message.reply_text(
        "Lwine - —Ü–µ –±–æ—Ç-–≥—Ä–∞. "
        "–í–∞–º —Ç—Ä–µ–±–∞ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è, —è–∫—ñ –∑–∞–¥–∞—î –±–æ—Ç. \U0001F4DD\n"
        "S—É—Ç—å —Ü—ñ—î—ó –≥—Ä–∏ ‚Äî –ø–æ –Ω–∞–∑–≤—ñ –≤–∏–Ω–∞ –≤–≥–∞–¥–∞—Ç–∏ –π–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ "
        "(—Ç–∏–ø –≤–∏–Ω–∞, —Å–æ–ª–æ–¥–∫—ñ—Å—Ç—å, –∫—Ä–∞—ó–Ω–∞ –ø–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥—Å–æ—Ç–æ–∫ –∞–ª–∫–æ–≥–æ–ª—é). \U0001F377\n"
        "–¢–∞–∫–æ–∂ –≤–∏ –º–∞—î—Ç–µ –ø—ñ–¥–∫–∞–∑–∫—É —É –≤–∏–≥–ª—è–¥—ñ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó –≤–∏–Ω–∞.\U0001F607 "
        "\n–í–∞—Ä—ñ–∞–Ω—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:\n"
        "1) –°–æ–ª–æ–¥–∫—ñ—Å—Ç—å: —Å—É—Ö–µ, –Ω–∞–ø—ñ–≤—Å—É—Ö–µ, –Ω–∞–ø—ñ–≤—Å–æ–ª–æ–¥–∫–µ, —Å–æ–ª–æ–¥–∫–µ, –±—Ä—é—Ç\n"
        "2) –¢–∏–ø –≤–∏–Ω–∞: —á–µ—Ä–≤–æ–Ω–µ, –±—ñ–ª–µ, —Ä–æ–∂–µ–≤–µ\n"
        "3) –ö—Ä–∞—ó–Ω–∞: –¢—Ä–µ–±–∞ –Ω–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞–∑–≤—É –∫—Ä–∞—ó–Ω–∏ –∑ —è–∫–æ—ó –≤–∏–Ω–æ, –Ω–∞ –≤–∞—à—É –¥—É–º–∫—É\n"
        "4) –í—ñ–¥—Å–æ—Ç–æ–∫ –∞–ª–∫–æ–≥–æ–ª—é: –¢—Ä–µ–±–∞ –Ω–∞–ø–∏—Å–∞—Ç–∏ –≤—ñ–¥—Å–æ—Ç–æ–∫ –∞–ª–∫–æ–≥–æ–ª—é –≤–∏–Ω–∞ –∑ –ø–æ—Ö–∏–±–∫–æ—é 0.4\n\n"
        "–£—Å–ø—ñ—Ö—ñ–≤! \U0001F64C \U0001F60A"
    )


def game(update: Update, context: CallbackContext, user_id: int = None) -> None:
    if user_id is None:
        user_id = update.effective_user.id
    conn = psycopg2.connect(
        host=os.getenv("DB_HOST"),
        database=os.getenv("DB_NAME"),
        user=os.getenv("DB_USER"),
        password=os.getenv("DB_PASSWORD"),
    )
    cur = conn.cursor()
    cur.execute(
        """
        SELECT name, country_id, sweetness, percent_of_alcohol, wine_type, image_url
        FROM wine_map_wine
        ORDER BY RANDOM()
        LIMIT 1
    """
    )
    wine_data = cur.fetchone()

    cur.execute(
        """
        SELECT id, name
        FROM wine_map_country
        WHERE id = %s
    """,
        (wine_data[1],),
    )
    country_data = cur.fetchone()
    questions = []
    if wine_data[1] is not None:
        questions.append(
            {
                "question": "–í–≥–∞–¥–∞–π—Ç–µ –∫—Ä–∞—ó–Ω—É –≤–∏—Ä–æ–±–Ω–∏–∫–∞ –≤–∏–Ω–∞? (–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –Ü—Ç–∞–ª—ñ—è)",
                "answer": country_data[1],
            }
        )
    if wine_data[2] is not None:
        questions.append(
            {
                "question": "–í–≥–∞–¥–∞–π—Ç–µ —Å–æ–ª–æ–¥–∫—ñ—Å—Ç—å –≤–∏–Ω–∞? (–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –Ω–∞–ø—ñ–≤—Å—É—Ö–µ)",
                "answer": wine_data[2],
            }
        )
    if wine_data[3] is not None:
        questions.append(
            {
                "question": "–í–≥–∞–¥–∞–π—Ç–µ –≤—ñ–¥—Å–æ—Ç–æ–∫ –∞–ª–∫–æ–≥–æ–ª—é —É –≤–∏–Ω—ñ? (–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 12.0)",
                "answer": wine_data[3],
            }
        )
    if wine_data[4] is not None:
        questions.append(
            {
                "question": "–í–≥–∞–¥–∞–π—Ç–µ —Ç–∏–ø –≤–∏–Ω–∞? (–ù–∞–ø—Ä–∏–∫–ª–∞–¥: —á–µ—Ä–≤–æ–Ω–µ)",
                "answer": wine_data[4],
            }
        )

    random.shuffle(questions)
    context.user_data[user_id] = {
        "answers": [],
        "questions": questions,
        "total_questions": len(questions),
        "points": 0,
        "wine_data": wine_data,
        "help_used": False,
    }

    return ask_question(update, context, user_id)


def ask_question(update: Update, context: CallbackContext, user_id: int) -> None:
    if not context.user_data[user_id]["questions"]:
        return game_over(update, context, user_id)

    question = context.user_data[user_id]["questions"].pop(0)

    context.user_data[user_id]["current_question"] = question
    context.user_data[user_id]["answers"].append(str(question["answer"]))
    wine_name = context.user_data[user_id]["wine_data"][0]
    question_text = question["question"]

    message = f"–ù–∞–∑–≤–∞ –≤–∏–Ω–∞: {wine_name}\n\n{question_text}"

    buttons = [
        InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è", callback_data="skip"),
    ]

    if not context.user_data[user_id]["help_used"]:
        buttons.append(InlineKeyboardButton("–í–∑—è—Ç–∏ –ø—ñ–¥–∫–∞–∑–∫—É", callback_data="help"))

    if update.callback_query:
        query = update.callback_query
        query.answer()
        query.edit_message_text(
            text=message, reply_markup=InlineKeyboardMarkup.from_column(buttons)
        )
    else:
        update.message.reply_text(
            message, reply_markup=InlineKeyboardMarkup.from_column(buttons)
        )

    return ANSWERING


def answer_question(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    if update.callback_query:
        query = update.callback_query
        query.answer()
        response = query.data.lower()
    else:
        response = update.message.text.lower()

    question = context.user_data[user_id]["current_question"]

    if question == "–í–≥–∞–¥–∞–π—Ç–µ –≤—ñ–¥—Å–æ—Ç–æ–∫ –∞–ª–∫–æ–≥–æ–ª—é —É –≤–∏–Ω—ñ? (–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 12.0)":
        try:
            response_float = float(response)
            if abs(response_float - question["answer"]) < 0.4:
                context.user_data[user_id]["points"] += 1
        except ValueError:
            pass
    elif response == str(question["answer"]).lower():
        context.user_data[user_id]["points"] += 1

    return ask_question(update, context, user_id)


def help_question(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    query = update.callback_query
    query.answer()

    image_url = context.user_data[user_id]["wine_data"][5]
    context.bot.send_photo(
        chat_id=query.message.chat_id,
        photo=image_url,
        caption="–û—Å—å –≤–∞–º —Ñ–æ—Ç–æ –≤–∏–Ω–∞!"
    )
    context.user_data[user_id]["help_used"] = True
    message = query.message.text
    buttons = [
        InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è", callback_data="skip")
    ]
    if context.user_data[user_id]["help_used"] is False:
        buttons.append(InlineKeyboardButton("–í–∑—è—Ç–∏ –ø—ñ–¥–∫–∞–∑–∫—É", callback_data="help"))
    query.edit_message_text(
        text=message,
        reply_markup=InlineKeyboardMarkup.from_column(buttons)
    )

    return ANSWERING


def skip_question(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    query = update.callback_query
    query.answer()

    return ask_question(update, context, user_id)


def game_over(update: Update, context: CallbackContext, user_id: int):
    points = context.user_data[user_id]["points"]
    total_questions = context.user_data[user_id]["total_questions"]
    answers = ", ".join(context.user_data[user_id]["answers"])
    if points == 0:
        result_text = (
            "–•–º, –º–∞–±—É—Ç—å –í–∏ –∑–æ–≤—Å—ñ–º –Ω–µ –∑–Ω–∞—î—Ç–µ —Ü–µ –≤–∏–Ω–æ. "
            "–ü—Ä–æ–ø–æ–Ω—É—é –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å –∑ –Ω–∏–º, –∞ –º–æ–∂–ª–∏–≤–æ, –Ω–∞–≤—ñ—Ç—å i —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –π–æ–≥–æ üòèüç∑ "
            "–ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º —Ç–∞ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —É –∫–æ–≥–æ –∑ –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤ "
            f"–π–æ–≥–æ –º–æ–∂–Ω–∞ –ø—Ä–∏–¥–±–∞—Ç–∏: {SITE}"
        )
    elif 1 <= points <= 2:
        result_text = (
            "–í–∏–¥–Ω–æ, —â–æ—Å—å-—Ç–∞–∫–∏ –ø—Ä–æ —Ü–µ –≤–∏–Ω–æ –í–∏ –∑–Ω–∞—î—Ç–µ, –∞ –º–æ–∂–ª–∏–≤–æ –ø—Ä–æ—Å—Ç–æ –≤–≥–∞–¥–∞–ª–∏ üôà "
            "–ú–æ–∂–ª–∏–≤–æ –í–∞–º –∑–∞—Ö–æ—á–µ—Ç—å—Å—è –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å –∑ —Ü–∏–º –≤–∏–Ω–æ–º –∫—Ä–∞—â–µ üòè "
            "–ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º —Ç–∞ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —É –∫–æ–≥–æ –∑ –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤ "
            f"–π–æ–≥–æ –º–æ–∂–Ω–∞ –ø—Ä–∏–¥–±–∞—Ç–∏: {SITE}"
        )
    elif points == 3:
        result_text = (
            "–ù–µ–ø–æ–≥–∞–Ω–æ, —â–µ —Ç—Ä—ñ—à–∫–∏, —ñ —Å—Ç–∞–Ω–µ—Ç–µ –∑–Ω–∞–≤—Ü–µ–º —Ü—ñ—î—ó –≥–∞–ª—É–∑—ñ. –ó–∞ —Ç–∞–∫–∏–π –≥–∞—Ä–Ω–∏–π  "
            "—Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –í–∞–º –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å –∑ –Ω–∞—è–≤–Ω—ñ—Å—Ç—é –¥–∞–Ω–æ–≥–æ –≤–∏–Ω–∞ —É –Ω–∞—à–∏—Ö "
            f"–ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: {SITE}üòâ –ê —â–µ, –¥–∞—î–º–æ "
            "–í–∞–º –æ—Å–æ–±–∏—Å—Ç—É –∑–Ω–∏–∂–∫—É 10% –Ω–∞ —Ü–µ –≤–∏–Ω–æ. –û—Å—å –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: 10LWINE2023 ü§´"
        )

    elif points == 4:
        result_text = (
            "–ê –í–∏ –º–∞–π—Å—Ç–µ—Ä —Å–≤–æ—î—ó —Å–ø—Ä–∞–≤–∏üò± –ó–∞ —Ç–∞–∫—ñ –ø—Ä–∏–≥–æ–ª–æ–º—à–ª–∏–≤—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ "
            "—Ö–æ—á–µ–º–æ –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ –í–∞–º –∑–Ω–∏–∂–∫—É –Ω–∞ —Ü–µ –≤–∏–Ω–æ —É —Ä–æ–∑–º—ñ—Ä—ñ 20% –≤—ñ–¥ "
            "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—ó —Ü—ñ–Ω–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∑–Ω–∏–∂–∫—É –í–∏ –º–æ–∂–µ—Ç–µ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é "
            "–ø—Ä–æ–º–æ–∫–æ–¥—É: 20LWINE2023, —è–∫–∏–π –¥—ñ—î —É –≤—Å—ñ—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö-–ø–∞—Ä—Ç–Ω–µ—Ä–∞—Ö. –©–æ–± "
            "–¥—ñ–∑–Ω–∞—Ç–∏—Å—å, –≤ —è–∫–∏—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö —î —Ü–µ –≤–∏–Ω–æ, –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: "
            f"{SITE}üç∑üî•"
        )

    message = (
        f"–í–∏ –∑–∞—Ä–æ–±–∏–ª–∏ {points}/{total_questions} –±–∞–ª—ñ–≤.\U0001F44C \n\n{result_text}\n\n"
        f"–ü—Ä–∞–≤–∏–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {answers}\n\n"
        f"–ë–∞–∂–∞—î—Ç–µ –∑—ñ–≥—Ä–∞—Ç–∏ —â–µ —Ä–∞–∑?\U0001F60E"
    )
    image_url = context.user_data[user_id]["wine_data"][5]

    if update.callback_query:
        chat_id = update.callback_query.message.chat_id
    else:
        chat_id = update.message.chat_id
    chat_id = update.message.chat_id
    buttons = [
        InlineKeyboardButton("–¢–∞–∫", callback_data="play_again"),
        InlineKeyboardButton("–ù—ñ", callback_data="quit")
    ]

    if update.callback_query:
        query = update.callback_query
        query.answer()
        context.bot.send_photo(chat_id=chat_id, photo=image_url)
        query.edit_message_text(
            text=message,
            reply_markup=InlineKeyboardMarkup.from_column(buttons)
        )
    else:
        context.bot.send_photo(chat_id=chat_id, photo=image_url)
        update.message.reply_text(
            message,
            reply_markup=InlineKeyboardMarkup.from_column(buttons)
        )

    return QUESTION


def play_again(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    query = update.callback_query
    query.answer()

    return game(update, context, user_id)


def quit_game(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    query.edit_message_text(text="–î—è–∫—É—î–º–æ –∑–∞ –≥—Ä—É! –ù–∞ –≤—Å–µ –¥–æ–±—Ä–µ!")

    return ConversationHandler.END


def main():
    updater = Updater(os.getenv("BOT_TOKEN"))

    dp = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler(
                "game",
                lambda update, context: game(update, context, update.effective_user.id)
            )
        ],
        states={
            QUESTION: [
                CallbackQueryHandler(play_again, pattern="^play_again$"),
                CallbackQueryHandler(quit_game, pattern="^quit$"),
            ],
            ANSWERING: [
                MessageHandler(Filters.text, answer_question),
                CallbackQueryHandler(help_question, pattern="^help$"),
                CallbackQueryHandler(skip_question, pattern="^skip$"),
            ],
        },
        fallbacks=[
            CommandHandler(
                "game",
                lambda update, context: game(update, context, update.effective_user.id)
            )
        ]
    )

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("site", site))
    dp.add_handler(CommandHandler("help", help))
    dp.add_handler(conv_handler)

    updater.start_polling()

    updater.idle()


if __name__ == "__main__":
    main()
